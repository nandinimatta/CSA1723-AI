import heapq

GOAL = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
MOVES = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def manhattan(s):
    return sum(abs(i - (v-1)//3) + abs(j - (v-1)%3)
               for i, row in enumerate(s) for j, v in enumerate(row) if v)

def find_zero(s):
    for i in range(3):
        for j in range(3):
            if s[i][j] == 0:
                return i, j

def neighbors(s):
    x, y = find_zero(s)
    result = []
    for dx, dy in MOVES:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_s = [r[:] for r in s]
            new_s[x][y], new_s[nx][ny] = new_s[nx][ny], new_s[x][y]
            result.append(new_s)
    return result

def a_star(start):
    heap, seen = [(manhattan(start), 0, start, [])], set()
    while heap:
        _, g, curr, path = heapq.heappop(heap)
        if curr == GOAL:
            return path + [curr]
        key = tuple(map(tuple, curr))
        if key in seen: continue
        seen.add(key)
        for n in neighbors(curr):
            heapq.heappush(heap, (g + 1 + manhattan(n), g + 1, n, path + [curr]))
    return None

def print_path(path):
    for i, state in enumerate(path):
        print(f"Step {i}:")
        for row in state:
            print(row)
        print()

initial = [[1, 2, 3], [4, 0, 6], [7, 5, 8]]
sol = a_star(initial)

if sol:
    print(f"Solved in {len(sol)-1} moves.")
    print_path(sol)
else:
    print("No solution.")
